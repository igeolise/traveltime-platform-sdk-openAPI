/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.1
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestRoutesDepartureSearch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestRoutesDepartureSearch::RequestRoutesDepartureSearch()
{
    m_Id = "";
    m_Departure_location_id = "";
    m_Departure_time = "";
    m_RangeIsSet = false;
    
}

RequestRoutesDepartureSearch::~RequestRoutesDepartureSearch()
{
}

void RequestRoutesDepartureSearch::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RequestRoutesDepartureSearch& o)
{
    j = nlohmann::json();
    j["id"] = o.m_Id;
    j["departure_location_id"] = o.m_Departure_location_id;
    j["arrival_location_ids"] = o.m_Arrival_location_ids;
    j["transportation"] = o.m_Transportation;
    j["departure_time"] = o.m_Departure_time;
    j["properties"] = o.m_Properties;
    if(o.rangeIsSet())
        j["range"] = o.m_Range;
}

void from_json(const nlohmann::json& j, RequestRoutesDepartureSearch& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("departure_location_id").get_to(o.m_Departure_location_id);
    j.at("arrival_location_ids").get_to(o.m_Arrival_location_ids);
    j.at("transportation").get_to(o.m_Transportation);
    j.at("departure_time").get_to(o.m_Departure_time);
    j.at("properties").get_to(o.m_Properties);
    if(j.find("range") != j.end())
    {
        j.at("range").get_to(o.m_Range);
        o.m_RangeIsSet = true;
    } 
}

std::string RequestRoutesDepartureSearch::getId() const
{
    return m_Id;
}
void RequestRoutesDepartureSearch::setId(std::string const& value)
{
    m_Id = value;
}
std::string RequestRoutesDepartureSearch::getDepartureLocationId() const
{
    return m_Departure_location_id;
}
void RequestRoutesDepartureSearch::setDepartureLocationId(std::string const& value)
{
    m_Departure_location_id = value;
}
std::vector<std::string>& RequestRoutesDepartureSearch::getArrivalLocationIds()
{
    return m_Arrival_location_ids;
}
void RequestRoutesDepartureSearch::setArrivalLocationIds(std::vector<std::string> const& value)
{
    m_Arrival_location_ids = value;
}
RequestTransportation RequestRoutesDepartureSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestRoutesDepartureSearch::setTransportation(RequestTransportation const& value)
{
    m_Transportation = value;
}
std::string RequestRoutesDepartureSearch::getDepartureTime() const
{
    return m_Departure_time;
}
void RequestRoutesDepartureSearch::setDepartureTime(std::string const& value)
{
    m_Departure_time = value;
}
std::vector<RequestRoutesProperty>& RequestRoutesDepartureSearch::getProperties()
{
    return m_Properties;
}
void RequestRoutesDepartureSearch::setProperties(std::vector<RequestRoutesProperty> const& value)
{
    m_Properties = value;
}
RequestRangeFull RequestRoutesDepartureSearch::getRange() const
{
    return m_Range;
}
void RequestRoutesDepartureSearch::setRange(RequestRangeFull const& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}
bool RequestRoutesDepartureSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}
void RequestRoutesDepartureSearch::unsetRange()
{
    m_RangeIsSet = false;
}

}
}
}
}

