/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.1
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTimeFilterProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseTimeFilterProperties::ResponseTimeFilterProperties()
{
    m_Travel_time = 0;
    m_Travel_timeIsSet = false;
    m_Distance = 0;
    m_DistanceIsSet = false;
    m_Distance_breakdownIsSet = false;
    m_FaresIsSet = false;
    m_RouteIsSet = false;
    
}

ResponseTimeFilterProperties::~ResponseTimeFilterProperties()
{
}

void ResponseTimeFilterProperties::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const ResponseTimeFilterProperties& o)
{
    j = nlohmann::json();
    if(o.travelTimeIsSet())
        j["travel_time"] = o.m_Travel_time;
    if(o.distanceIsSet())
        j["distance"] = o.m_Distance;
    if(o.distanceBreakdownIsSet() || !o.m_Distance_breakdown.empty())
        j["distance_breakdown"] = o.m_Distance_breakdown;
    if(o.faresIsSet())
        j["fares"] = o.m_Fares;
    if(o.routeIsSet())
        j["route"] = o.m_Route;
}

void from_json(const nlohmann::json& j, ResponseTimeFilterProperties& o)
{
    if(j.find("travel_time") != j.end())
    {
        j.at("travel_time").get_to(o.m_Travel_time);
        o.m_Travel_timeIsSet = true;
    } 
    if(j.find("distance") != j.end())
    {
        j.at("distance").get_to(o.m_Distance);
        o.m_DistanceIsSet = true;
    } 
    if(j.find("distance_breakdown") != j.end())
    {
        j.at("distance_breakdown").get_to(o.m_Distance_breakdown);
        o.m_Distance_breakdownIsSet = true;
    } 
    if(j.find("fares") != j.end())
    {
        j.at("fares").get_to(o.m_Fares);
        o.m_FaresIsSet = true;
    } 
    if(j.find("route") != j.end())
    {
        j.at("route").get_to(o.m_Route);
        o.m_RouteIsSet = true;
    } 
}

int32_t ResponseTimeFilterProperties::getTravelTime() const
{
    return m_Travel_time;
}
void ResponseTimeFilterProperties::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
    m_Travel_timeIsSet = true;
}
bool ResponseTimeFilterProperties::travelTimeIsSet() const
{
    return m_Travel_timeIsSet;
}
void ResponseTimeFilterProperties::unsetTravel_time()
{
    m_Travel_timeIsSet = false;
}
int32_t ResponseTimeFilterProperties::getDistance() const
{
    return m_Distance;
}
void ResponseTimeFilterProperties::setDistance(int32_t const value)
{
    m_Distance = value;
    m_DistanceIsSet = true;
}
bool ResponseTimeFilterProperties::distanceIsSet() const
{
    return m_DistanceIsSet;
}
void ResponseTimeFilterProperties::unsetDistance()
{
    m_DistanceIsSet = false;
}
std::vector<ResponseDistanceBreakdownItem>& ResponseTimeFilterProperties::getDistanceBreakdown()
{
    return m_Distance_breakdown;
}
void ResponseTimeFilterProperties::setDistanceBreakdown(std::vector<ResponseDistanceBreakdownItem> const& value)
{
    m_Distance_breakdown = value;
    m_Distance_breakdownIsSet = true;
}
bool ResponseTimeFilterProperties::distanceBreakdownIsSet() const
{
    return m_Distance_breakdownIsSet;
}
void ResponseTimeFilterProperties::unsetDistance_breakdown()
{
    m_Distance_breakdownIsSet = false;
}
ResponseFares ResponseTimeFilterProperties::getFares() const
{
    return m_Fares;
}
void ResponseTimeFilterProperties::setFares(ResponseFares const& value)
{
    m_Fares = value;
    m_FaresIsSet = true;
}
bool ResponseTimeFilterProperties::faresIsSet() const
{
    return m_FaresIsSet;
}
void ResponseTimeFilterProperties::unsetFares()
{
    m_FaresIsSet = false;
}
ResponseRoute ResponseTimeFilterProperties::getRoute() const
{
    return m_Route;
}
void ResponseTimeFilterProperties::setRoute(ResponseRoute const& value)
{
    m_Route = value;
    m_RouteIsSet = true;
}
bool ResponseTimeFilterProperties::routeIsSet() const
{
    return m_RouteIsSet;
}
void ResponseTimeFilterProperties::unsetRoute()
{
    m_RouteIsSet = false;
}

}
}
}
}

