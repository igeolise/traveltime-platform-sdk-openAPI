/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.1
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RequestTimeFilterFastArrivalManyToOneSearch.h
 *
 * 
 */

#ifndef RequestTimeFilterFastArrivalManyToOneSearch_H_
#define RequestTimeFilterFastArrivalManyToOneSearch_H_


#include "RequestTimeFilterFastProperty.h"
#include <string>
#include "RequestArrivalTimePeriod.h"
#include "RequestTransportationFast.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  RequestTimeFilterFastArrivalManyToOneSearch
{
public:
    RequestTimeFilterFastArrivalManyToOneSearch();
    virtual ~RequestTimeFilterFastArrivalManyToOneSearch();

    void validate();

    /////////////////////////////////////////////
    /// RequestTimeFilterFastArrivalManyToOneSearch members

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getArrivalLocationId() const;
    void setArrivalLocationId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string>& getDepartureLocationIds();
    void setDepartureLocationIds(std::vector<std::string> const& value);
    /// <summary>
    /// 
    /// </summary>
    RequestTransportationFast getTransportation() const;
    void setTransportation(RequestTransportationFast const& value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getTravelTime() const;
    void setTravelTime(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    RequestArrivalTimePeriod getArrivalTimePeriod() const;
    void setArrivalTimePeriod(RequestArrivalTimePeriod const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<RequestTimeFilterFastProperty>& getProperties();
    void setProperties(std::vector<RequestTimeFilterFastProperty> const& value);

    friend void to_json(nlohmann::json& j, const RequestTimeFilterFastArrivalManyToOneSearch& o);
    friend void from_json(const nlohmann::json& j, RequestTimeFilterFastArrivalManyToOneSearch& o);
protected:
    std::string m_Id;

    std::string m_Arrival_location_id;

    std::vector<std::string> m_Departure_location_ids;

    RequestTransportationFast m_Transportation;

    int32_t m_Travel_time;

    RequestArrivalTimePeriod m_Arrival_time_period;

    std::vector<RequestTimeFilterFastProperty> m_Properties;

};

}
}
}
}

#endif /* RequestTimeFilterFastArrivalManyToOneSearch_H_ */
