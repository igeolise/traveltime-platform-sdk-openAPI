/**
* TravelTime API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.2.1
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeFilterPostcodeDistrictsDepartureSearch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeFilterPostcodeDistrictsDepartureSearch::RequestTimeFilterPostcodeDistrictsDepartureSearch()
{
    m_Id = "";
    m_Travel_time = 0;
    m_Departure_time = "";
    m_Reachable_postcodes_threshold = 0.0;
    m_RangeIsSet = false;
    
}

RequestTimeFilterPostcodeDistrictsDepartureSearch::~RequestTimeFilterPostcodeDistrictsDepartureSearch()
{
}

void RequestTimeFilterPostcodeDistrictsDepartureSearch::validate()
{
    // TODO: implement validation
}

void to_json(nlohmann::json& j, const RequestTimeFilterPostcodeDistrictsDepartureSearch& o)
{
    j = nlohmann::json();
    j["id"] = o.m_Id;
    j["transportation"] = o.m_Transportation;
    j["travel_time"] = o.m_Travel_time;
    j["departure_time"] = o.m_Departure_time;
    j["reachable_postcodes_threshold"] = o.m_Reachable_postcodes_threshold;
    j["properties"] = o.m_Properties;
    if(o.rangeIsSet())
        j["range"] = o.m_Range;
}

void from_json(const nlohmann::json& j, RequestTimeFilterPostcodeDistrictsDepartureSearch& o)
{
    j.at("id").get_to(o.m_Id);
    j.at("transportation").get_to(o.m_Transportation);
    j.at("travel_time").get_to(o.m_Travel_time);
    j.at("departure_time").get_to(o.m_Departure_time);
    j.at("reachable_postcodes_threshold").get_to(o.m_Reachable_postcodes_threshold);
    j.at("properties").get_to(o.m_Properties);
    if(j.find("range") != j.end())
    {
        j.at("range").get_to(o.m_Range);
        o.m_RangeIsSet = true;
    } 
}

std::string RequestTimeFilterPostcodeDistrictsDepartureSearch::getId() const
{
    return m_Id;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setId(std::string const& value)
{
    m_Id = value;
}
RequestTransportation RequestTimeFilterPostcodeDistrictsDepartureSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setTransportation(RequestTransportation const& value)
{
    m_Transportation = value;
}
int32_t RequestTimeFilterPostcodeDistrictsDepartureSearch::getTravelTime() const
{
    return m_Travel_time;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
}
std::string RequestTimeFilterPostcodeDistrictsDepartureSearch::getDepartureTime() const
{
    return m_Departure_time;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setDepartureTime(std::string const& value)
{
    m_Departure_time = value;
}
double RequestTimeFilterPostcodeDistrictsDepartureSearch::getReachablePostcodesThreshold() const
{
    return m_Reachable_postcodes_threshold;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setReachablePostcodesThreshold(double const value)
{
    m_Reachable_postcodes_threshold = value;
}
std::vector<RequestTimeFilterPostcodeDistrictsProperty>& RequestTimeFilterPostcodeDistrictsDepartureSearch::getProperties()
{
    return m_Properties;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setProperties(std::vector<RequestTimeFilterPostcodeDistrictsProperty> const& value)
{
    m_Properties = value;
}
RequestRangeFull RequestTimeFilterPostcodeDistrictsDepartureSearch::getRange() const
{
    return m_Range;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::setRange(RequestRangeFull const& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}
bool RequestTimeFilterPostcodeDistrictsDepartureSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}
void RequestTimeFilterPostcodeDistrictsDepartureSearch::unsetRange()
{
    m_RangeIsSet = false;
}

}
}
}
}

