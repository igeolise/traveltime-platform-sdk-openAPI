/*
 * TravelTime API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.1
 * Contact: support@igeolise.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{ service: s }
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"GeocodingReverseSearch",
			strings.ToUpper("Get"),
			"/v4/geocoding/reverse",
			c.GeocodingReverseSearch,
		},
		{
			"GeocodingSearch",
			strings.ToUpper("Get"),
			"/v4/geocoding/search",
			c.GeocodingSearch,
		},
		{
			"MapInfo",
			strings.ToUpper("Get"),
			"/v4/map-info",
			c.MapInfo,
		},
		{
			"Routes",
			strings.ToUpper("Post"),
			"/v4/routes",
			c.Routes,
		},
		{
			"SupportedLocations",
			strings.ToUpper("Post"),
			"/v4/supported-locations",
			c.SupportedLocations,
		},
		{
			"TimeFilter",
			strings.ToUpper("Post"),
			"/v4/time-filter",
			c.TimeFilter,
		},
		{
			"TimeFilterFast",
			strings.ToUpper("Post"),
			"/v4/time-filter/fast",
			c.TimeFilterFast,
		},
		{
			"TimeFilterPostcodeDistricts",
			strings.ToUpper("Post"),
			"/v4/time-filter/postcode-districts",
			c.TimeFilterPostcodeDistricts,
		},
		{
			"TimeFilterPostcodeSectors",
			strings.ToUpper("Post"),
			"/v4/time-filter/postcode-sectors",
			c.TimeFilterPostcodeSectors,
		},
		{
			"TimeFilterPostcodes",
			strings.ToUpper("Post"),
			"/v4/time-filter/postcodes",
			c.TimeFilterPostcodes,
		},
		{
			"TimeMap",
			strings.ToUpper("Post"),
			"/v4/time-map",
			c.TimeMap,
		},
	}
}

// GeocodingReverseSearch - 
func (c *DefaultApiController) GeocodingReverseSearch(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	lat := query.Get("lat")
	lng := query.Get("lng")
	withinCountry := query.Get("withinCountry")
	result, err := c.service.GeocodingReverseSearch(lat, lng, withinCountry)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GeocodingSearch - 
func (c *DefaultApiController) GeocodingSearch(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	query := query.Get("query")
	focusLat := query.Get("focusLat")
	focusLng := query.Get("focusLng")
	withinCountry := query.Get("withinCountry")
	result, err := c.service.GeocodingSearch(query, focusLat, focusLng, withinCountry)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// MapInfo - 
func (c *DefaultApiController) MapInfo(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.MapInfo()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// Routes - 
func (c *DefaultApiController) Routes(w http.ResponseWriter, r *http.Request) { 
	requestRoutes := &RequestRoutes{}
	if err := json.NewDecoder(r.Body).Decode(&requestRoutes); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.Routes(*requestRoutes)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// SupportedLocations - 
func (c *DefaultApiController) SupportedLocations(w http.ResponseWriter, r *http.Request) { 
	requestSupportedLocations := &RequestSupportedLocations{}
	if err := json.NewDecoder(r.Body).Decode(&requestSupportedLocations); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.SupportedLocations(*requestSupportedLocations)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TimeFilter - 
func (c *DefaultApiController) TimeFilter(w http.ResponseWriter, r *http.Request) { 
	requestTimeFilter := &RequestTimeFilter{}
	if err := json.NewDecoder(r.Body).Decode(&requestTimeFilter); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TimeFilter(*requestTimeFilter)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TimeFilterFast - 
func (c *DefaultApiController) TimeFilterFast(w http.ResponseWriter, r *http.Request) { 
	requestTimeFilterFast := &RequestTimeFilterFast{}
	if err := json.NewDecoder(r.Body).Decode(&requestTimeFilterFast); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TimeFilterFast(*requestTimeFilterFast)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TimeFilterPostcodeDistricts - 
func (c *DefaultApiController) TimeFilterPostcodeDistricts(w http.ResponseWriter, r *http.Request) { 
	requestTimeFilterPostcodeDistricts := &RequestTimeFilterPostcodeDistricts{}
	if err := json.NewDecoder(r.Body).Decode(&requestTimeFilterPostcodeDistricts); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TimeFilterPostcodeDistricts(*requestTimeFilterPostcodeDistricts)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TimeFilterPostcodeSectors - 
func (c *DefaultApiController) TimeFilterPostcodeSectors(w http.ResponseWriter, r *http.Request) { 
	requestTimeFilterPostcodeSectors := &RequestTimeFilterPostcodeSectors{}
	if err := json.NewDecoder(r.Body).Decode(&requestTimeFilterPostcodeSectors); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TimeFilterPostcodeSectors(*requestTimeFilterPostcodeSectors)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TimeFilterPostcodes - 
func (c *DefaultApiController) TimeFilterPostcodes(w http.ResponseWriter, r *http.Request) { 
	requestTimeFilterPostcodes := &RequestTimeFilterPostcodes{}
	if err := json.NewDecoder(r.Body).Decode(&requestTimeFilterPostcodes); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TimeFilterPostcodes(*requestTimeFilterPostcodes)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// TimeMap - 
func (c *DefaultApiController) TimeMap(w http.ResponseWriter, r *http.Request) { 
	requestTimeMap := &RequestTimeMap{}
	if err := json.NewDecoder(r.Body).Decode(&requestTimeMap); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.TimeMap(*requestTimeMap)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
