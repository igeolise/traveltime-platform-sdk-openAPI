#
# TravelTime API
# 
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# The version of the OpenAPI document: 1.2.1
# Contact: support@igeolise.com
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_request_routes
import ../models/model_request_supported_locations
import ../models/model_request_time_filter
import ../models/model_request_time_filter_fast
import ../models/model_request_time_filter_postcode_districts
import ../models/model_request_time_filter_postcode_sectors
import ../models/model_request_time_filter_postcodes
import ../models/model_request_time_map
import ../models/model_response_error
import ../models/model_response_geocoding
import ../models/model_response_map_info
import ../models/model_response_routes
import ../models/model_response_supported_locations
import ../models/model_response_time_filter
import ../models/model_response_time_filter_fast
import ../models/model_response_time_filter_postcode_districts
import ../models/model_response_time_filter_postcode_sectors
import ../models/model_response_time_filter_postcodes
import ../models/model_response_time_map

const basepath = "https://api.traveltimeapp.com"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc geocodingReverseSearch*(httpClient: HttpClient, lat: float64, lng: float64, within.country: string): (Option[ResponseGeocoding], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("lat", $lat), # 
    ("lng", $lng), # 
    ("within.country", $within.country), # 
  ])

  let response = httpClient.get(basepath & "/v4/geocoding/reverse" & "?" & query_for_api_call)
  constructResult[ResponseGeocoding](response)


proc geocodingSearch*(httpClient: HttpClient, query: string, focus.lat: float64, focus.lng: float64, within.country: string): (Option[ResponseGeocoding], Response) =
  ## 
  let query_for_api_call = encodeQuery([
    ("query", $query), # 
    ("focus.lat", $focus.lat), # 
    ("focus.lng", $focus.lng), # 
    ("within.country", $within.country), # 
  ])

  let response = httpClient.get(basepath & "/v4/geocoding/search" & "?" & query_for_api_call)
  constructResult[ResponseGeocoding](response)


proc mapInfo*(httpClient: HttpClient): (Option[ResponseMapInfo], Response) =
  ## 

  let response = httpClient.get(basepath & "/v4/map-info")
  constructResult[ResponseMapInfo](response)


proc routes*(httpClient: HttpClient, RequestRoutes: RequestRoutes): (Option[ResponseRoutes], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/routes", $(%RequestRoutes))
  constructResult[ResponseRoutes](response)


proc supportedLocations*(httpClient: HttpClient, RequestSupportedLocations: RequestSupportedLocations): (Option[ResponseSupportedLocations], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/supported-locations", $(%RequestSupportedLocations))
  constructResult[ResponseSupportedLocations](response)


proc timeFilter*(httpClient: HttpClient, RequestTimeFilter: RequestTimeFilter): (Option[ResponseTimeFilter], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/time-filter", $(%RequestTimeFilter))
  constructResult[ResponseTimeFilter](response)


proc timeFilterFast*(httpClient: HttpClient, RequestTimeFilterFast: RequestTimeFilterFast): (Option[ResponseTimeFilterFast], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/time-filter/fast", $(%RequestTimeFilterFast))
  constructResult[ResponseTimeFilterFast](response)


proc timeFilterPostcodeDistricts*(httpClient: HttpClient, RequestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts): (Option[ResponseTimeFilterPostcodeDistricts], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/time-filter/postcode-districts", $(%RequestTimeFilterPostcodeDistricts))
  constructResult[ResponseTimeFilterPostcodeDistricts](response)


proc timeFilterPostcodeSectors*(httpClient: HttpClient, RequestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors): (Option[ResponseTimeFilterPostcodeSectors], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/time-filter/postcode-sectors", $(%RequestTimeFilterPostcodeSectors))
  constructResult[ResponseTimeFilterPostcodeSectors](response)


proc timeFilterPostcodes*(httpClient: HttpClient, RequestTimeFilterPostcodes: RequestTimeFilterPostcodes): (Option[ResponseTimeFilterPostcodes], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/time-filter/postcodes", $(%RequestTimeFilterPostcodes))
  constructResult[ResponseTimeFilterPostcodes](response)


proc timeMap*(httpClient: HttpClient, RequestTimeMap: RequestTimeMap): (Option[ResponseTimeMap], Response) =
  ## 
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/v4/time-map", $(%RequestTimeMap))
  constructResult[ResponseTimeMap](response)

