# coding: utf-8

"""
    TravelTime API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Contact: support@igeolise.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestTimeFilterFastArrivalSearches(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'many_to_one': 'list[RequestTimeFilterFastArrivalManyToOneSearch]',
        'one_to_many': 'list[RequestTimeFilterFastArrivalOneToManySearch]'
    }

    attribute_map = {
        'many_to_one': 'many_to_one',
        'one_to_many': 'one_to_many'
    }

    def __init__(self, many_to_one=None, one_to_many=None, local_vars_configuration=None):  # noqa: E501
        """RequestTimeFilterFastArrivalSearches - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._many_to_one = None
        self._one_to_many = None
        self.discriminator = None

        if many_to_one is not None:
            self.many_to_one = many_to_one
        if one_to_many is not None:
            self.one_to_many = one_to_many

    @property
    def many_to_one(self):
        """Gets the many_to_one of this RequestTimeFilterFastArrivalSearches.  # noqa: E501


        :return: The many_to_one of this RequestTimeFilterFastArrivalSearches.  # noqa: E501
        :rtype: list[RequestTimeFilterFastArrivalManyToOneSearch]
        """
        return self._many_to_one

    @many_to_one.setter
    def many_to_one(self, many_to_one):
        """Sets the many_to_one of this RequestTimeFilterFastArrivalSearches.


        :param many_to_one: The many_to_one of this RequestTimeFilterFastArrivalSearches.  # noqa: E501
        :type many_to_one: list[RequestTimeFilterFastArrivalManyToOneSearch]
        """

        self._many_to_one = many_to_one

    @property
    def one_to_many(self):
        """Gets the one_to_many of this RequestTimeFilterFastArrivalSearches.  # noqa: E501


        :return: The one_to_many of this RequestTimeFilterFastArrivalSearches.  # noqa: E501
        :rtype: list[RequestTimeFilterFastArrivalOneToManySearch]
        """
        return self._one_to_many

    @one_to_many.setter
    def one_to_many(self, one_to_many):
        """Sets the one_to_many of this RequestTimeFilterFastArrivalSearches.


        :param one_to_many: The one_to_many of this RequestTimeFilterFastArrivalSearches.  # noqa: E501
        :type one_to_many: list[RequestTimeFilterFastArrivalOneToManySearch]
        """

        self._one_to_many = one_to_many

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestTimeFilterFastArrivalSearches):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestTimeFilterFastArrivalSearches):
            return True

        return self.to_dict() != other.to_dict()
