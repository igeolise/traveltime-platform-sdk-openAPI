# coding: utf-8

"""
    TravelTime API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Contact: support@igeolise.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ResponseGeocodingProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'label': 'str',
        'score': 'float',
        'house_number': 'str',
        'street': 'str',
        'region': 'str',
        'region_code': 'str',
        'neighbourhood': 'str',
        'county': 'str',
        'macroregion': 'str',
        'city': 'str',
        'country': 'str',
        'country_code': 'str',
        'continent': 'str',
        'postcode': 'str',
        'features': 'ResponseMapInfoFeatures'
    }

    attribute_map = {
        'name': 'name',
        'label': 'label',
        'score': 'score',
        'house_number': 'house_number',
        'street': 'street',
        'region': 'region',
        'region_code': 'region_code',
        'neighbourhood': 'neighbourhood',
        'county': 'county',
        'macroregion': 'macroregion',
        'city': 'city',
        'country': 'country',
        'country_code': 'country_code',
        'continent': 'continent',
        'postcode': 'postcode',
        'features': 'features'
    }

    def __init__(self, name=None, label=None, score=None, house_number=None, street=None, region=None, region_code=None, neighbourhood=None, county=None, macroregion=None, city=None, country=None, country_code=None, continent=None, postcode=None, features=None, local_vars_configuration=None):  # noqa: E501
        """ResponseGeocodingProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._label = None
        self._score = None
        self._house_number = None
        self._street = None
        self._region = None
        self._region_code = None
        self._neighbourhood = None
        self._county = None
        self._macroregion = None
        self._city = None
        self._country = None
        self._country_code = None
        self._continent = None
        self._postcode = None
        self._features = None
        self.discriminator = None

        self.name = name
        self.label = label
        if score is not None:
            self.score = score
        if house_number is not None:
            self.house_number = house_number
        if street is not None:
            self.street = street
        if region is not None:
            self.region = region
        if region_code is not None:
            self.region_code = region_code
        if neighbourhood is not None:
            self.neighbourhood = neighbourhood
        if county is not None:
            self.county = county
        if macroregion is not None:
            self.macroregion = macroregion
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if continent is not None:
            self.continent = continent
        if postcode is not None:
            self.postcode = postcode
        if features is not None:
            self.features = features

    @property
    def name(self):
        """Gets the name of this ResponseGeocodingProperties.  # noqa: E501


        :return: The name of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseGeocodingProperties.


        :param name: The name of this ResponseGeocodingProperties.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def label(self):
        """Gets the label of this ResponseGeocodingProperties.  # noqa: E501


        :return: The label of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ResponseGeocodingProperties.


        :param label: The label of this ResponseGeocodingProperties.  # noqa: E501
        :type label: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def score(self):
        """Gets the score of this ResponseGeocodingProperties.  # noqa: E501


        :return: The score of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ResponseGeocodingProperties.


        :param score: The score of this ResponseGeocodingProperties.  # noqa: E501
        :type score: float
        """

        self._score = score

    @property
    def house_number(self):
        """Gets the house_number of this ResponseGeocodingProperties.  # noqa: E501


        :return: The house_number of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this ResponseGeocodingProperties.


        :param house_number: The house_number of this ResponseGeocodingProperties.  # noqa: E501
        :type house_number: str
        """

        self._house_number = house_number

    @property
    def street(self):
        """Gets the street of this ResponseGeocodingProperties.  # noqa: E501


        :return: The street of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this ResponseGeocodingProperties.


        :param street: The street of this ResponseGeocodingProperties.  # noqa: E501
        :type street: str
        """

        self._street = street

    @property
    def region(self):
        """Gets the region of this ResponseGeocodingProperties.  # noqa: E501


        :return: The region of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ResponseGeocodingProperties.


        :param region: The region of this ResponseGeocodingProperties.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def region_code(self):
        """Gets the region_code of this ResponseGeocodingProperties.  # noqa: E501


        :return: The region_code of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ResponseGeocodingProperties.


        :param region_code: The region_code of this ResponseGeocodingProperties.  # noqa: E501
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def neighbourhood(self):
        """Gets the neighbourhood of this ResponseGeocodingProperties.  # noqa: E501


        :return: The neighbourhood of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._neighbourhood

    @neighbourhood.setter
    def neighbourhood(self, neighbourhood):
        """Sets the neighbourhood of this ResponseGeocodingProperties.


        :param neighbourhood: The neighbourhood of this ResponseGeocodingProperties.  # noqa: E501
        :type neighbourhood: str
        """

        self._neighbourhood = neighbourhood

    @property
    def county(self):
        """Gets the county of this ResponseGeocodingProperties.  # noqa: E501


        :return: The county of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this ResponseGeocodingProperties.


        :param county: The county of this ResponseGeocodingProperties.  # noqa: E501
        :type county: str
        """

        self._county = county

    @property
    def macroregion(self):
        """Gets the macroregion of this ResponseGeocodingProperties.  # noqa: E501


        :return: The macroregion of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._macroregion

    @macroregion.setter
    def macroregion(self, macroregion):
        """Sets the macroregion of this ResponseGeocodingProperties.


        :param macroregion: The macroregion of this ResponseGeocodingProperties.  # noqa: E501
        :type macroregion: str
        """

        self._macroregion = macroregion

    @property
    def city(self):
        """Gets the city of this ResponseGeocodingProperties.  # noqa: E501


        :return: The city of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ResponseGeocodingProperties.


        :param city: The city of this ResponseGeocodingProperties.  # noqa: E501
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this ResponseGeocodingProperties.  # noqa: E501


        :return: The country of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ResponseGeocodingProperties.


        :param country: The country of this ResponseGeocodingProperties.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this ResponseGeocodingProperties.  # noqa: E501


        :return: The country_code of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this ResponseGeocodingProperties.


        :param country_code: The country_code of this ResponseGeocodingProperties.  # noqa: E501
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def continent(self):
        """Gets the continent of this ResponseGeocodingProperties.  # noqa: E501


        :return: The continent of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this ResponseGeocodingProperties.


        :param continent: The continent of this ResponseGeocodingProperties.  # noqa: E501
        :type continent: str
        """

        self._continent = continent

    @property
    def postcode(self):
        """Gets the postcode of this ResponseGeocodingProperties.  # noqa: E501


        :return: The postcode of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this ResponseGeocodingProperties.


        :param postcode: The postcode of this ResponseGeocodingProperties.  # noqa: E501
        :type postcode: str
        """

        self._postcode = postcode

    @property
    def features(self):
        """Gets the features of this ResponseGeocodingProperties.  # noqa: E501


        :return: The features of this ResponseGeocodingProperties.  # noqa: E501
        :rtype: ResponseMapInfoFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ResponseGeocodingProperties.


        :param features: The features of this ResponseGeocodingProperties.  # noqa: E501
        :type features: ResponseMapInfoFeatures
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseGeocodingProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseGeocodingProperties):
            return True

        return self.to_dict() != other.to_dict()
