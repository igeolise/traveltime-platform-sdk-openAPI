# coding: utf-8

"""
    TravelTime API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Contact: support@igeolise.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestTransportation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'pt_change_delay': 'int',
        'walking_time': 'int',
        'driving_time_to_station': 'int',
        'parking_time': 'int',
        'boarding_time': 'int'
    }

    attribute_map = {
        'type': 'type',
        'pt_change_delay': 'pt_change_delay',
        'walking_time': 'walking_time',
        'driving_time_to_station': 'driving_time_to_station',
        'parking_time': 'parking_time',
        'boarding_time': 'boarding_time'
    }

    def __init__(self, type=None, pt_change_delay=None, walking_time=None, driving_time_to_station=None, parking_time=None, boarding_time=None, local_vars_configuration=None):  # noqa: E501
        """RequestTransportation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._pt_change_delay = None
        self._walking_time = None
        self._driving_time_to_station = None
        self._parking_time = None
        self._boarding_time = None
        self.discriminator = None

        self.type = type
        if pt_change_delay is not None:
            self.pt_change_delay = pt_change_delay
        if walking_time is not None:
            self.walking_time = walking_time
        if driving_time_to_station is not None:
            self.driving_time_to_station = driving_time_to_station
        if parking_time is not None:
            self.parking_time = parking_time
        if boarding_time is not None:
            self.boarding_time = boarding_time

    @property
    def type(self):
        """Gets the type of this RequestTransportation.  # noqa: E501


        :return: The type of this RequestTransportation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestTransportation.


        :param type: The type of this RequestTransportation.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["cycling", "driving", "driving+train", "public_transport", "walking", "coach", "bus", "train", "ferry", "driving+ferry", "cycling+ferry"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def pt_change_delay(self):
        """Gets the pt_change_delay of this RequestTransportation.  # noqa: E501


        :return: The pt_change_delay of this RequestTransportation.  # noqa: E501
        :rtype: int
        """
        return self._pt_change_delay

    @pt_change_delay.setter
    def pt_change_delay(self, pt_change_delay):
        """Sets the pt_change_delay of this RequestTransportation.


        :param pt_change_delay: The pt_change_delay of this RequestTransportation.  # noqa: E501
        :type pt_change_delay: int
        """

        self._pt_change_delay = pt_change_delay

    @property
    def walking_time(self):
        """Gets the walking_time of this RequestTransportation.  # noqa: E501


        :return: The walking_time of this RequestTransportation.  # noqa: E501
        :rtype: int
        """
        return self._walking_time

    @walking_time.setter
    def walking_time(self, walking_time):
        """Sets the walking_time of this RequestTransportation.


        :param walking_time: The walking_time of this RequestTransportation.  # noqa: E501
        :type walking_time: int
        """

        self._walking_time = walking_time

    @property
    def driving_time_to_station(self):
        """Gets the driving_time_to_station of this RequestTransportation.  # noqa: E501


        :return: The driving_time_to_station of this RequestTransportation.  # noqa: E501
        :rtype: int
        """
        return self._driving_time_to_station

    @driving_time_to_station.setter
    def driving_time_to_station(self, driving_time_to_station):
        """Sets the driving_time_to_station of this RequestTransportation.


        :param driving_time_to_station: The driving_time_to_station of this RequestTransportation.  # noqa: E501
        :type driving_time_to_station: int
        """

        self._driving_time_to_station = driving_time_to_station

    @property
    def parking_time(self):
        """Gets the parking_time of this RequestTransportation.  # noqa: E501


        :return: The parking_time of this RequestTransportation.  # noqa: E501
        :rtype: int
        """
        return self._parking_time

    @parking_time.setter
    def parking_time(self, parking_time):
        """Sets the parking_time of this RequestTransportation.


        :param parking_time: The parking_time of this RequestTransportation.  # noqa: E501
        :type parking_time: int
        """

        self._parking_time = parking_time

    @property
    def boarding_time(self):
        """Gets the boarding_time of this RequestTransportation.  # noqa: E501


        :return: The boarding_time of this RequestTransportation.  # noqa: E501
        :rtype: int
        """
        return self._boarding_time

    @boarding_time.setter
    def boarding_time(self, boarding_time):
        """Sets the boarding_time of this RequestTransportation.


        :param boarding_time: The boarding_time of this RequestTransportation.  # noqa: E501
        :type boarding_time: int
        """

        self._boarding_time = boarding_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestTransportation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestTransportation):
            return True

        return self.to_dict() != other.to_dict()
