# coding: utf-8

"""
    TravelTime API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.2.1
    Contact: support@igeolise.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ResponseRoutePart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'type': 'str',
        'mode': 'ResponseTransportationMode',
        'directions': 'str',
        'distance': 'int',
        'travel_time': 'int',
        'coords': 'list[Coords]',
        'direction': 'str',
        'road': 'str',
        'turn': 'str',
        'line': 'str',
        'departure_station': 'str',
        'arrival_station': 'str',
        'departs_at': 'str',
        'arrives_at': 'str',
        'num_stops': 'int'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'mode': 'mode',
        'directions': 'directions',
        'distance': 'distance',
        'travel_time': 'travel_time',
        'coords': 'coords',
        'direction': 'direction',
        'road': 'road',
        'turn': 'turn',
        'line': 'line',
        'departure_station': 'departure_station',
        'arrival_station': 'arrival_station',
        'departs_at': 'departs_at',
        'arrives_at': 'arrives_at',
        'num_stops': 'num_stops'
    }

    def __init__(self, id=None, type=None, mode=None, directions=None, distance=None, travel_time=None, coords=None, direction=None, road=None, turn=None, line=None, departure_station=None, arrival_station=None, departs_at=None, arrives_at=None, num_stops=None, local_vars_configuration=None):  # noqa: E501
        """ResponseRoutePart - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._mode = None
        self._directions = None
        self._distance = None
        self._travel_time = None
        self._coords = None
        self._direction = None
        self._road = None
        self._turn = None
        self._line = None
        self._departure_station = None
        self._arrival_station = None
        self._departs_at = None
        self._arrives_at = None
        self._num_stops = None
        self.discriminator = None

        self.id = id
        self.type = type
        self.mode = mode
        self.directions = directions
        self.distance = distance
        self.travel_time = travel_time
        self.coords = coords
        if direction is not None:
            self.direction = direction
        if road is not None:
            self.road = road
        if turn is not None:
            self.turn = turn
        if line is not None:
            self.line = line
        if departure_station is not None:
            self.departure_station = departure_station
        if arrival_station is not None:
            self.arrival_station = arrival_station
        if departs_at is not None:
            self.departs_at = departs_at
        if arrives_at is not None:
            self.arrives_at = arrives_at
        if num_stops is not None:
            self.num_stops = num_stops

    @property
    def id(self):
        """Gets the id of this ResponseRoutePart.  # noqa: E501


        :return: The id of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseRoutePart.


        :param id: The id of this ResponseRoutePart.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this ResponseRoutePart.  # noqa: E501


        :return: The type of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseRoutePart.


        :param type: The type of this ResponseRoutePart.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["basic", "start_end", "road", "public_transport"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def mode(self):
        """Gets the mode of this ResponseRoutePart.  # noqa: E501


        :return: The mode of this ResponseRoutePart.  # noqa: E501
        :rtype: ResponseTransportationMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ResponseRoutePart.


        :param mode: The mode of this ResponseRoutePart.  # noqa: E501
        :type mode: ResponseTransportationMode
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def directions(self):
        """Gets the directions of this ResponseRoutePart.  # noqa: E501


        :return: The directions of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this ResponseRoutePart.


        :param directions: The directions of this ResponseRoutePart.  # noqa: E501
        :type directions: str
        """
        if self.local_vars_configuration.client_side_validation and directions is None:  # noqa: E501
            raise ValueError("Invalid value for `directions`, must not be `None`")  # noqa: E501

        self._directions = directions

    @property
    def distance(self):
        """Gets the distance of this ResponseRoutePart.  # noqa: E501


        :return: The distance of this ResponseRoutePart.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ResponseRoutePart.


        :param distance: The distance of this ResponseRoutePart.  # noqa: E501
        :type distance: int
        """
        if self.local_vars_configuration.client_side_validation and distance is None:  # noqa: E501
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def travel_time(self):
        """Gets the travel_time of this ResponseRoutePart.  # noqa: E501


        :return: The travel_time of this ResponseRoutePart.  # noqa: E501
        :rtype: int
        """
        return self._travel_time

    @travel_time.setter
    def travel_time(self, travel_time):
        """Sets the travel_time of this ResponseRoutePart.


        :param travel_time: The travel_time of this ResponseRoutePart.  # noqa: E501
        :type travel_time: int
        """
        if self.local_vars_configuration.client_side_validation and travel_time is None:  # noqa: E501
            raise ValueError("Invalid value for `travel_time`, must not be `None`")  # noqa: E501

        self._travel_time = travel_time

    @property
    def coords(self):
        """Gets the coords of this ResponseRoutePart.  # noqa: E501


        :return: The coords of this ResponseRoutePart.  # noqa: E501
        :rtype: list[Coords]
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this ResponseRoutePart.


        :param coords: The coords of this ResponseRoutePart.  # noqa: E501
        :type coords: list[Coords]
        """
        if self.local_vars_configuration.client_side_validation and coords is None:  # noqa: E501
            raise ValueError("Invalid value for `coords`, must not be `None`")  # noqa: E501

        self._coords = coords

    @property
    def direction(self):
        """Gets the direction of this ResponseRoutePart.  # noqa: E501


        :return: The direction of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ResponseRoutePart.


        :param direction: The direction of this ResponseRoutePart.  # noqa: E501
        :type direction: str
        """

        self._direction = direction

    @property
    def road(self):
        """Gets the road of this ResponseRoutePart.  # noqa: E501


        :return: The road of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._road

    @road.setter
    def road(self, road):
        """Sets the road of this ResponseRoutePart.


        :param road: The road of this ResponseRoutePart.  # noqa: E501
        :type road: str
        """

        self._road = road

    @property
    def turn(self):
        """Gets the turn of this ResponseRoutePart.  # noqa: E501


        :return: The turn of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._turn

    @turn.setter
    def turn(self, turn):
        """Sets the turn of this ResponseRoutePart.


        :param turn: The turn of this ResponseRoutePart.  # noqa: E501
        :type turn: str
        """

        self._turn = turn

    @property
    def line(self):
        """Gets the line of this ResponseRoutePart.  # noqa: E501


        :return: The line of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this ResponseRoutePart.


        :param line: The line of this ResponseRoutePart.  # noqa: E501
        :type line: str
        """

        self._line = line

    @property
    def departure_station(self):
        """Gets the departure_station of this ResponseRoutePart.  # noqa: E501


        :return: The departure_station of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._departure_station

    @departure_station.setter
    def departure_station(self, departure_station):
        """Sets the departure_station of this ResponseRoutePart.


        :param departure_station: The departure_station of this ResponseRoutePart.  # noqa: E501
        :type departure_station: str
        """

        self._departure_station = departure_station

    @property
    def arrival_station(self):
        """Gets the arrival_station of this ResponseRoutePart.  # noqa: E501


        :return: The arrival_station of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._arrival_station

    @arrival_station.setter
    def arrival_station(self, arrival_station):
        """Sets the arrival_station of this ResponseRoutePart.


        :param arrival_station: The arrival_station of this ResponseRoutePart.  # noqa: E501
        :type arrival_station: str
        """

        self._arrival_station = arrival_station

    @property
    def departs_at(self):
        """Gets the departs_at of this ResponseRoutePart.  # noqa: E501


        :return: The departs_at of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._departs_at

    @departs_at.setter
    def departs_at(self, departs_at):
        """Sets the departs_at of this ResponseRoutePart.


        :param departs_at: The departs_at of this ResponseRoutePart.  # noqa: E501
        :type departs_at: str
        """

        self._departs_at = departs_at

    @property
    def arrives_at(self):
        """Gets the arrives_at of this ResponseRoutePart.  # noqa: E501


        :return: The arrives_at of this ResponseRoutePart.  # noqa: E501
        :rtype: str
        """
        return self._arrives_at

    @arrives_at.setter
    def arrives_at(self, arrives_at):
        """Sets the arrives_at of this ResponseRoutePart.


        :param arrives_at: The arrives_at of this ResponseRoutePart.  # noqa: E501
        :type arrives_at: str
        """

        self._arrives_at = arrives_at

    @property
    def num_stops(self):
        """Gets the num_stops of this ResponseRoutePart.  # noqa: E501


        :return: The num_stops of this ResponseRoutePart.  # noqa: E501
        :rtype: int
        """
        return self._num_stops

    @num_stops.setter
    def num_stops(self, num_stops):
        """Sets the num_stops of this ResponseRoutePart.


        :param num_stops: The num_stops of this ResponseRoutePart.  # noqa: E501
        :type num_stops: int
        """

        self._num_stops = num_stops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseRoutePart):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseRoutePart):
            return True

        return self.to_dict() != other.to_dict()
